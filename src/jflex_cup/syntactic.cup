import org.stringtemplate.v4.*;
import java_cup.runtime.*;
import java.io.PrintWriter;

/* ---------------------- user component section --------------------*/
action code {:
	/* Stores the attibutes of an object */
	public Container generateContainer(Container recent, Container old){
		Container c = null;
		if(old == null){
			c = new Container();
			if(recent.getLocation() != null)
				c.setLocation(recent.getLocation());
			else if(recent.getRotation() != null)
				c.setRotation(recent.getRotation());
			else if(recent.getScale() != null)
				c.setScale(recent.getScale());
			else if(recent.getSpeed() != null)
				c.setSpeed(recent.getSpeed());
			else if(recent.getWeight() != null)
				c.setWeight(recent.getWeight());
		}
		else{
			if(recent.getLocation() != null)
				old.setLocation(recent.getLocation());
			else if(recent.getRotation() != null)
				old.setRotation(recent.getRotation());
			else if(recent.getScale() != null)
				old.setScale(recent.getScale());
			else if(recent.getSpeed() != null)
				old.setSpeed(recent.getSpeed());
			else if(recent.getWeight() != null)
				old.setWeight(recent.getWeight());
			c = old;
		}
		return c;
	}

	/* Creates a template for each object */
	public ST generateST(Type_figure type, Container container){
		STGroup stGroup = new STGroupFile("../template/primitive_shape.stg");
		ST template = stGroup.getInstanceOf("primitive_shape");
		template.add("figure", type.getFigure());
		template.add("name", type.getId());

		if(container.getLocation() != null){
			template.add("origin_x", container.getLocation().getX());
			template.add("origin_y", container.getLocation().getY());
			template.add("origin_z", container.getLocation().getZ());
		}
		if(container.getRotation() != null){
			template.add("rotation_x", container.getRotation().getX());
			template.add("rotation_y", container.getRotation().getY());
			template.add("rotation_z", container.getRotation().getZ());
		}if(container.getScale() != null){
			template.add("scale_x", container.getScale().getX());
			template.add("scale_y", container.getScale().getY());
			template.add("scale_z", container.getScale().getZ());
		}
		return template;
	}

	/* Generates the python file according to the code of template */
	public void generate_python_file(ContainerST containerST){
		try {
			PrintWriter out = new PrintWriter(parser.file);
			while(!containerST.isEmpty()){
				out.println(containerST.poll().render());
			}
			out.close();
		} catch (Exception e) {
			System.out.println("Exception!!! " + e.getStackTrace());
		}
		System.out.println("\n" + parser.file + " generated");
	}
:}// end action code

parser code {:
	/* name of the python file */
	String file = "";

	/* Reports a syntax error when some error occurs */
	public void syntax_error(Symbol s) {
		report_error("Syntax error in line " + s.left + " and column " + s.right, null);
	}

	/* Reports an error when the program cannot be recovered */
	public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
		report_fatal_error("", null);
	}
:}// end parser code

terminal STATIC_OBJECT, DYNAMIC_OBJECT, LEFTBRACKET, RIGHTBRACKET, LOCATION, SCALE;
terminal SEMICOLON, BEGIN, ACTION, DECLARATION, SPEED, WEIGHT, ROTATION;
terminal COMMA, RIGHTPARENT, LEFTPARENT, START_SIMULATION, END;

terminal String ID, TYPE_FIGURE;
terminal Float REAL;

non terminal program;
non terminal body_action;

non terminal ST static_declaration, dynamic_declaration;
non terminal ContainerST static_dynamic, body_declaration, body_program;
non terminal Container value_static, value_dynamic;
non terminal Container attribute_declaration, value_object;
non terminal Type_figure figure_declaration;
non terminal Coordinates coordinates;
non terminal Rotation rotation;
non terminal Scale scale;
non terminal Location location;
non terminal Speed speed;
non terminal Weight weight;

start with program;

program					::= BEGIN ID body_program:b END
							{:
								generate_python_file(b);
							:} ;

body_program 			::= DECLARATION body_declaration:b ACTION body_action
							{:
								STGroup stGroup = new STGroupFile("../template/import.stg");
								ST template = stGroup.getInstanceOf("import_sentence");
								template.add("name", "bpy");
								b.add(template);
								RESULT = b;
							:};

body_declaration		::= LEFTBRACKET static_declaration:s static_dynamic:s1 RIGHTBRACKET
							{:
								ContainerST c = null;
								if(s1 == null)
									c = new ContainerST();
								else
									c = s1;
								c.add(s);
								RESULT = c;
							:}
							| LEFTBRACKET dynamic_declaration:d static_dynamic:s RIGHTBRACKET 
							{:
								ContainerST c = null;
								if(s == null)
									c = new ContainerST();
								else
									c = s;
								c.add(d);
								RESULT = c;
							:}
							;

body_action 			::= LEFTBRACKET START_SIMULATION SEMICOLON RIGHTBRACKET ;

static_declaration		::= STATIC_OBJECT figure_declaration:f LEFTBRACKET attribute_declaration:a RIGHTBRACKET
							{:
								ST template = generateST(f, a);
								RESULT = template;
							:} ;

static_dynamic 			::= static_declaration:s static_dynamic:s1
							{:
								ContainerST c = null;
								if(s1 == null){
									c = new ContainerST();
									c.add(s);
								}else{
									c = s1;
									c.add(s);
								}
								RESULT = c;
							:}
							| dynamic_declaration:d static_dynamic:s
							{:
								ContainerST c = null;
								if(s == null){
									c = new ContainerST();
									c.add(d);
								}else{
									c = s;
									c.add(d);
								}
								RESULT = c;
							:}
							|
							{:
								ContainerST c = null;
								RESULT = c;
							:}
							;

dynamic_declaration		::= DYNAMIC_OBJECT figure_declaration:f LEFTBRACKET value_object:v RIGHTBRACKET
							{:
								ST template = generateST(f, v);
								RESULT = template;
							:} ;

figure_declaration 		::= TYPE_FIGURE:tp ID:id
							{:  
								String tp_lowerCase = tp.toLowerCase();
								Type_figure type = null;
								if(!tp.equals("Sphere"))
									type = new Type_figure(tp_lowerCase, id);
								else
									type = new Type_figure(id);
								RESULT = type;
							:}
							;

attribute_declaration 	::= value_static:v attribute_declaration:a
							{:
								Container c = generateContainer(v, a);
								RESULT = c;
							:}
							|
							{:
								Container c = null;
								RESULT = c;
							:}
							;

value_object 			::= value_static:v value_object:v1
							{:
								Container c = generateContainer(v, v1);
								RESULT = c;
							:}
							| value_dynamic:v value_object:v1
							{:
								Container c = generateContainer(v, v1);
								RESULT = c;
							:}
							|
							{:
								Container c = null;
								RESULT = c;
							:}
							;

value_static 			::= location:l
							{:
								Container c = new Container(l);
								RESULT = c; 
							:}
							| rotation:r
							{:
								Container c = new Container(r);
								RESULT = c; 
							:}
							| scale:s
							{:
								Container c = new Container(s);
								RESULT = c; 
							:}
							;

value_dynamic 			::= weight:w
							{:
								Container c = new Container(w);
								RESULT = c; 
							:}
							| speed:s
							{:
								Container c = new Container(s);
								RESULT = c; 
							:}
							;

location				::= LOCATION coordinates:c SEMICOLON 
							{:	
								Location l = new Location(c.getX(), c.getY(), c.getZ());
								RESULT = l;	
							:}
							;

rotation				::= ROTATION coordinates:c SEMICOLON 
							{:	
								Rotation r = new Rotation(c.getX(), c.getY(), c.getZ());
								RESULT = r;
							:};

scale 					::= SCALE coordinates:c SEMICOLON
							{:	
								Scale s = new Scale(c.getX(), c.getY(), c.getZ());
								RESULT = s;
							:}
							;

weight 					::= WEIGHT REAL:r SEMICOLON 
							{: 
								Weight w = new Weight(r.toString()); 
								RESULT = w;
							:};

speed 					::= SPEED coordinates:c SEMICOLON 
							{: 
								Speed s = new Speed(c.getX(), c.getY(), c.getZ()); 
								RESULT = s;
							:};

coordinates 			::= LEFTPARENT REAL:r1 COMMA REAL:r2 COMMA REAL:r3 RIGHTPARENT
							{: 
								Coordinates c = new Coordinates(r1.toString(), r2.toString(), r3.toString());
								RESULT = c;			
							:}
							;